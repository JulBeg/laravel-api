#!/bin/bash

#######################################
# FUNCTIONS
#######################################

# Run an Artisan command
artisan() {
    docker compose exec api php artisan "${@:1}"
}

# Build all of the images or the specified one
build() {
    docker compose build "${@:1}"
}

# Run a Composer command
composer() {
    docker compose exec api composer "${@:1}"
}

# Remove the entire Docker environment
destroy() {
    read -p "This will delete containers, volumes and images. Are you sure? [y/N]: " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then exit; fi
    docker compose down -v --rmi all --remove-orphans
}

# Stop and destroy all containers
down() {
    docker compose down "${@:1}"
}

# Execute a container
exec() {
    docker compose exec "${@}"
}

# Install Laravel
install() {
    if [ ! -z "$(ls -A src 2>/dev/null)" ]; then
        read -p "This will delete the src directory. Are you sure? [y/N]: " -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then exit; fi
        rm -rf src && mkdir src
    fi
    docker compose exec api composer create-project --prefer-dist laravel/laravel .
}

# Display and tail the logs of all containers or the specified one's
logs() {
    docker compose logs -f "${@:1}"
}

# Run Laravel Pint
pint() {
    docker compose exec api ./vendor/bin/pint "${@:1}"
}

# Restart the containers
restart() {
    stop && start
}

# Run PHPStan
stan() {
    docker compose exec api ./vendor/bin/phpstan analyse --memory-limit=2G "${@:1}"
}

# Start the containers
start() {
    docker compose up -d
}

# Stop the containers
stop() {
    docker compose stop
}

# Run Artisan test
test() {
    artisan test "${@:1}"
}

# Update the Docker environment
update() {
    git pull &&
        build &&
        composer install &&
        artisan migrate &&
        start
}

#######################################
# MENU
#######################################

case "$1" in
artisan)
    artisan "${@:2}"
    ;;
build)
    build "${@:2}"
    ;;
composer)
    composer "${@:2}"
    ;;
destroy)
    destroy
    ;;
down)
    down "${@:2}"
    ;;
exec)
    exec "${@:2}"
    ;;
install)
    install
    ;;
logs)
    logs "${@:2}"
    ;;
pint)
    pint "${@:2}"
    ;;
restart)
    restart
    ;;
stan)
    stan "${@:2}"
    ;;
start)
    start
    ;;
stop)
    stop
    ;;
test)
    test "${@:2}"
    ;;
update)
    update
    ;;
*)
    cat <<EOF
Command line interface for the Docker-based web development environment laravel.
Usage:
    lrvl <command> [options] [arguments]
Available commands:
    artisan ................................... Run an Artisan command
    build [image] ............................. Build all of the images or the specified one
    composer .................................. Run a Composer command
    destroy ................................... Remove the entire Docker environment
    down [-v] ................................. Stop and destroy all containers
                                                Options:
                                                    -v .................... Destroy the volumes as well
    exec [command] ............................. Execute a container
    install ................................... Install a new Laravel application
    logs [container] .......................... Display and tail the logs of all containers or the specified one's
    pint ...................................... PHP code style fixer
    restart ................................... Restart the containers
    stan ...................................... PHP Static Analysis Tool
    start ..................................... Start the containers
    stop ...................................... Stop the containers
    test ...................................... Run artisan test
    update .................................... Update the Docker environment
EOF
    exit
    ;;
esac
